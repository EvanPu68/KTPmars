load_all()
library(devtools)
load_all()
use_gpl3_license()
document()
use_package("stats")
document()
usethis::use_vignette("mars")
document()
usethis::use_testthat()
usethis::use_data_raw("marstestdata")
## code to prepare `marstestdata` dataset goes here
# Refer to STAT 360, Lecture 9 exercise solution by Becky Lin
set.seed(123)
# Parameters
N <- 100; n <- 10
knot1 <- -0.5; knot2 <- 0; knot3 <- 0.5
beta1 <- 3; beta2 <- 5
error.SD <- 0.1
# Simulate x's
x <- matrix(rnorm(N*n),ncol=n)
# Simulate response variable
h <- function(x,s,t) {
return(pmax(0,s*(x-t)))
}
lin.pred <- beta1*h(x[,1],+1,knot1) + beta2*h(x[,2],-1,knot2)*h(x[,1],+1,knot3)
y <- lin.pred + rnorm(n,sd=error.SD)
# Package response and explanatory variables as a data frame
marstestdata <- data.frame(cbind(y,x))
names(marstestdata) <- c("y",paste0("x",1:n))
usethis::use_data(marstestdata, overwrite = TRUE)
load_all(0)
load_all()
document()
test()
load_all()
test()
test()
load_all()
library(devtools)
install_github("EvanPu68/KTPmars")
load_all()
library(KTPmars)
library(KTPmars)
mc <- mars.control(Mmax = 10)
concrete <-mars(ConcreteCompressiveStrength~.,data=concrete,control = mc)
toxic <-mars(LC50~.,data=fishToxicity, control = mc)
yacht <-mars(RRPUWOD~.,data=yacht, control = mc)
summary(concrete)
summary(toxic)
summary(yacht)
load_all()
library(devtools)
load_all()
library(KTPmars)
library(KTPmars)
detach("package:KTPmars", unload = TRUE)
library(KTPmars)
yacht <-mars(RRPUWOD~.,data=yacht, control = mc)
library(KTPmars)
detach("package:KTPmars", unload = TRUE)
library(KTPmars)
remove.packages("KTPmars")
library(KTPmars)
library(devtools)
library(KTPmars)
load_all()
library(KTPmars)
library(KTPmars)
install_github("EvanPu68/KTPmars")
library(devtools)
install_github("EvanPu68/KTPmars")
library(KTPmars)
document()
pkgload::dev_help('mars')
mc <- mars.control(Mmax = 10,3,T)
concrete <-mars(ConcreteCompressiveStrength~.,data=concrete,control = mc)
View(concrete)
View(concrete)
document()
pkgload::dev_help('mars')
document()
pkgload::dev_help('mars')
?concrete
document()
pkgload::dev_help('mars')
document()
pkgload::dev_help('mars')
document()
pkgload::dev_help('mars')
View(concrete[["B"]])
concrete[["Bfuncs"]]
?concrete
document()
pkgload::dev_help('mars')
concrete[["assign"]]
View(concrete[["model"]])
View(concrete[["model"]])
document()
pkgload::dev_help('mars')
docuemnt()
document()
pkgload::dev_help('mars')
document()
pkgload::dev_help('mars')
document()
pkgload::dev_help('mars')
mf <- model.frame(ConcreteCompressiveStrength~.,data=concrete)
mf <- model.frame(ConcreteCompressiveStrength~.,data=concrete)
class(mf)
y <- model.response(mf)
mt <- attr(mf, "terms")
x <- model.matrix(mt, mf)[,-1,drop=FALSE]
class(y)
class(x)
document()
pkgload::dev_help('mars')
document()
pkgload::dev_help('fwd_stepwise')
document()
pkgload::dev_help('fwd_stepwise')
document(0)
document()
pkgload::dev_help('fwd_stepwise')
document(0)
document()
pkgload::dev_help('fwd_stepwise')
concrete
document()
load_all(0)
load_all()
document()
library(KTPmars)
mc <- mars.control(Mmax = 10)
concretemars <-mars(ConcreteCompressiveStrength~.,data=concrete,control = mc)
toxicmars <-mars(LC50~.,data=fishToxicity, control = mc)
yachtmars <-mars(RRPUWOD~.,data=yacht, control = mc)
anova(concretemars)
anova(toxicmars)
anova(yachtmars)
document()
library(KTPmars)
document(0)
document(0)
document()
View(concretemars)
document()
document()
pkgload::dev_help('predict.mars')
?anova.mars
document()
pkgload::dev_help('mars')
document()
document()
pkgload::dev_help('mars')
document()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(KTPmars)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(KTPmars)
install_github("EvanPu68/KTPmars")
remove.packages("KTPmars")
library(devtools)
install_github("EvanPu68/KTPmars")
library(KTPmars)
mm<-mars(ConcreteCompressiveStrength~.,data=concrete,control = mars.control(
Mmax=10,d=3,trace=FALSE))
anova(mm)
anova.mars <- function(object) {
fit <- lm(y~.-1,data=data.frame(y=object$y,object$B))
anova(fit)
for (i in 1:length(names(object$B))){
cat(names(object$B)[[i]], ":","\n")
if(i == 1){
cat("Intercept", "\n")
next
}
Bf = object$Bfuncs[[i]]
for(j in 1:nrow(Bf))
cat("Component ",j,":", "\n",
"","Sign:",Bf[j,1],"\n",
"","Split Variable:",Bf[j,2],"\n",
"","Split Point:",Bf[j,3],"\n")
}
}
anova(mm)
anova.mars <- function(object) {
fit <- lm(y~.-1,data=data.frame(y=object$y,object$B))
print(anova(fit))
for (i in 1:length(names(object$B))){
cat(names(object$B)[[i]], ":","\n")
if(i == 1){
cat("Intercept", "\n")
next
}
Bf = object$Bfuncs[[i]]
for(j in 1:nrow(Bf))
cat("Component ",j,":", "\n",
"","Sign:",Bf[j,1],"\n",
"","Split Variable:",Bf[j,2],"\n",
"","Split Point:",Bf[j,3],"\n")
}
}
anova(mm)
summary.mars<-function(object){
print(summary.lm(object))
for (i in 1:length(names(object$B))){
cat(names(object$B)[[i]], ":","\n")
if(i == 1){
cat("Intercept", "\n")
next
}
Bf = object$Bfuncs[[i]]
for(j in 1:nrow(Bf))
cat("Component ",j,":", "\n",
"","Sign:",Bf[j,1],"\n",
"","Split Variable:",Bf[j,2],"\n",
"","Split Point:",Bf[j,3],"\n")
}
}
summary(mm)
library(KTPmars)
print(concretemars)
library(KTPmars)
mc <- mars.control(Mmax = 10)
concretemars <-mars(ConcreteCompressiveStrength~.,data=concrete,control = mc)
toxicmars <-mars(LC50~.,data=fishToxicity, control = mc)
yachtmars <-mars(RRPUWOD~.,data=yacht, control = mc)
print(concretemars)
print(toxicmars)
print(yachtmars)
predict(concretemars)
predict(toxicmars)
predict(yachtmars)
anova(concretemars)
anova(toxicmars)
anova(yachtmars)
plot(concretemars)
plot(toxicmars)
plot(yachtmars)
remove.packages("KTPmars")
library(devtools)
install_github("EvanPu68/KTPmars")
library(devtools)
install_github("EvanPu68/KTPmars")
?fwd_stepwise
library(devtools)
load_all()
?fwd_stepwise
?new_mars.control()
